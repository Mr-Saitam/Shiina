const { is_num, saveJSON } = require("../utils/utilidades.js"),
			errorDB = require("../class/errorDB.js");

module.exports = {
	delIndex: function(clave, index, split_object, global_object, self, save) {

    if(!index && index != 0) throw new errorDB(`El segundo parametro debe ser un index(numero)`, 'NUMERO INVALIDO', 'delIndex', clave, index)
    if(!is_num(index)) throw new errorDB(`El segundo parametro debe ser un index(numero)`, 'NUMERO INVALIDO', 'delIndex', clave, index)
    index = parseInt(index)

	  var [...args] = clave.split(split_object)
	  var object_data = global_object[self.object_id]

		for(var key of args) {
			if(!object_data.hasOwnProperty(key)) return Promise.reject(new errorDB(`No se encontro la propiedad ${key}, base de datos: ${self.database_name}`, 'PROPIEDAD NO EXISTENTE', 'delIndex', clave, index))
			if(key == args[args.length-1]) {
				if(!Array.isArray(object_data[key])) return Promise.reject(new errorDB(`El valor de la propiedad ${key} no es un array, base de datos: ${self.database_name}`, 'ARRAY NO EXISTENTE', 'delIndex', clave, index))
				if(index >= object_data[key].length) return Promise.reject(new errorDB(`El item con el indice ${index} no existe en el array ${key}, base de datos: ${self.database_name}`, 'ITEM NO EXISTENTE', 'delIndex', clave, index))
				object_data[key].splice(index, 1)
				if(!save) return Promise.resolve(object_data[key])
				saveJSON(self, global_object[self.object_id])
				return Promise.resolve(object_data[key])
			}
			else {
				object_data = object_data[key]
			}
		}
	}
}


