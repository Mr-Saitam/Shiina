const fs = require("graceful-fs"),
    path = require("path"),
    mkdirp = require("mkdirp"),
    errorDB = require("../class/errorDB.js");

let time_objects = new Object();


function is_float(n) {
  return typeof(n, "Number") && !!(n % 1)
}


//--------------------------------------------------------------------------------------\\
//---------------------------------------------------------------------------------------\\


function is_num(n) {
  return !!parseInt(n) == false && parseInt(n) != 0 ? false : true
}


//--------------------------------------------------------------------------------------\\
//---------------------------------------------------------------------------------------\\


function readJSON(path_file_name) {
  if(!fs.existsSync(path_file_name)) throw new errorDB(`El archivo ${path_file_name} no existe.`, 'DATABASE INVALIDA', 'readJSON', path_file_name)
  var obj_data;
  try{
    let get_data = fs.readFileSync(path_file_name, 'utf8')
    obj_data = JSON.parse(get_data)
  }
  catch(error) {
    throw new errorDB(`Ocurrio un problema al tratar de leer los datos del archivo ${path_file_name}, error: ${error}`, 'DATABASE INVALIDA', 'readJSON', path_file_name)
  }
  return obj_data
}


//--------------------------------------------------------------------------------------\\
//---------------------------------------------------------------------------------------\\


function isObject(type_var) {
  if(typeof type_var == "object" && !(type_var instanceof Array)) return true
  return false
}


//--------------------------------------------------------------------------------------\\
//---------------------------------------------------------------------------------------\\


function writeJSON(path_file_name, new_object) {
  if(!fs.existsSync(path_file_name)) throw new errorDB(`El archivo ${path_file_name} no existe.`, 'DATABASE INVALIDA', 'saveJSON', path_file_name)
  try{
    fs.writeFileSync(path_file_name, JSON.stringify(new_object, null, 2), 'utf8')
  }
  catch(error) {
    throw new errorDB(`Ocurrio un error al tratar de guardar los datos en el archivo ${path_file_name}, error: ${error}`, 'DATABASE INVALIDA', 'saveJSON', path_file_name)
  }
}

//--------------------------------------------------------------------------------------\\
//---------------------------------------------------------------------------------------\\


function saveJSON(self, new_object) {
  if(self.save_time !== false) {
    if(!time_objects[self.object_id]) {
      time_objects[self.object_id] = {
        time: self.save_time * 1000,
        saved: false
      }
    }
    if(time_objects[self.object_id].saved == false) {
      time_objects[self.object_id].saved = true
      setTimeout(() => {
        time_objects[self.object_id].saved = false
        writeJSON(self.path_file_name, new_object)
      }, time_objects[self.object_id].time)     
    }
  }
  else {
    writeJSON(self.path_file_name, new_object)
  }
}


//--------------------------------------------------------------------------------------\\
//---------------------------------------------------------------------------------------\\


function check_path_object(path_object, split_object, method, value) {
  if(!path_object || typeof path_object != "string") throw new errorDB('El nombre de la clave no fue especificado', 'CLAVE INVALIDA', method, path_object, value)
  if(path_object.includes(`${split_object}${split_object}`)) throw new errorDB(`El nombre de la clave no debe de contener el signo ${split_object} seguido de otro.`, 'CLAVE INVALIDA', method, path_object, value)
  if(path_object.startsWith(split_object) || path_object.endsWith(split_object)) throw new errorDB(`El nombre de la clave no debe empezar ni terminar con un ${split_object}`, 'CLAVE INVALIDA', method, path_object, value)
}


//--------------------------------------------------------------------------------------\\
//---------------------------------------------------------------------------------------\\


function build_path(object) {
  if(typeof object != "object" || (object instanceof Array)) throw new errorDB("Parametros incorrectos, el constructor crearDB puede recibir un objeto o dos parametros indicando el nombre de la base de datos y el sub directorio.", 'PARAMETRO INVALIDO', 'crearDB', object) //Poco probable que esta linea sea evaluada pero de igual forma..
  let nombre = object.hasOwnProperty("nombre")  && typeof object.nombre == "string" ? object.nombre.replace(/[^a-zA-Z0-9_]/g, '') : ""
  let carpeta = object.hasOwnProperty("carpeta") && typeof object.carpeta == "string" ? object.carpeta.replace(/[^a-zA-Z0-9_]/g, '') : "mega_databases"
  let sub_carpeta = object.hasOwnProperty("sub") && typeof object.sub == "string" ? object.sub.replace(/[^a-zA-Z0-9_]/g, '') : false
  let guardar_tiempo = object.hasOwnProperty("guardar_tiempo") && typeof object.guardar_tiempo == "number" ? parseInt(object.guardar_tiempo) : false

  if(!nombre) throw new errorDB(`Necesitas colocar el nombre de la base de datos, debe ser un string y asegurate de no usar simbolos.`, 'NOMBRE INVALIDO', 'crearDB', object)
  if(!carpeta) throw new errorDB("El nombre de la carpeta donde se guardaran las bases de datos debe ser un string y asegurate de no usar simbolos.", 'NOMBRE INVALIDO', 'crearDB', object)
  if(!sub_carpeta && sub_carpeta !== false) throw new errorDB(`El nombre del sub directorio ${sub_carpeta} debe ser un string y asegurate de no usar simbolos.`,'NOMBRE INVALIDO' ,'crearDB', object)
  if(guardar_tiempo !== false && guardar_tiempo < 4) throw new errorDB("El tiempo que se usara para actualizar los datos en la base de datos debe ser mayor a 4 (segundos)", 'NUMERO INVALIDO', 'crearDB', object)
  
  let root = path.join(path.dirname(require.main.filename), carpeta)
  if(!fs.existsSync(root)) {
    mkdirp(root, (err) => {
      if(err) throw new errorDB(`No se pudo crear la carpeta ${carpeta} donde se almacenaran las base de datos, error: ${err}`, 'CARPETA INVALIDA', 'crearDB', object)
      console.log(`[CREANDO DIRECTORIO] Acaba de crearse la carpeta ${carpeta}, en esta carpeta ${sub_carpeta != false ? "se creara tu sub directorio" : "se almacenaran tus base de datos"}.`)       
    })
  }
  if(sub_carpeta) {
    if(!fs.existsSync(`${root}/${sub_carpeta}`)) {
      mkdirp(`${root}/${sub_carpeta}`, (err) => {
        if(err) throw new errorDB(`[ERROR](crearDB) No se pudo crear el sub directorio ${sub_carpeta}, error: ${err}`, 'CARPETA INVALIDA', 'crearDB', object)
        console.log(`[CREANDO SUB DIRECTORIO] Acaba de crearse el sub directorio ${sub_carpeta}, en esta carpeta se almacenaran tus base de datos.`)
      })
    }
    root = path.join(root, sub_carpeta)
  }
  if(!fs.existsSync(`${root}/${nombre}.json`)) {
    fs.writeFileSync(`${root}/${nombre}.json`, JSON.stringify({}, null, 2), { flag: 'wx' }, function(err) {
      if(err) throw new errorDB(`No se pudo crear la base de datos ${database_name}, error: ${err}`, 'DATABASE INVALIDA', 'crearDB', object)
    })
  }

  return {
    path_json: path.join(root,`${nombre}.json`),
    path_carpet: root,
    nombre: nombre,
    object_id: sub_carpeta ? `${carpeta}/${sub_carpeta}/${nombre}` : `${carpeta}/${nombre}`,
    save_time: guardar_tiempo
  }
}


module.exports = {
  is_float,
  is_num,
  readJSON,
  saveJSON,
  check_path_object,
  build_path,
  isObject
}