const Discord = require('discord.js')
const { Message } = require('discord.js')
const { EventEmitter } = require('events')
const map = new Map()


async function spamfilter({ message, messageCount, alertMessage, punishment, maxInterval, removeMessages, logsChannel }, ignoredMembers = [], options = {}) {

    if (!message) throw new Error("[Discord Chat Filter] -> Unknown Message");

    if (isNaN(alertMessage)) throw new Error("[Discord Chat Filter] -> Invalid number for 'alertMessage'");

    if (isNaN(messageCount)) throw new Error("[Discord Chat Filter] -> Invalid number for 'messageCount'");

    if (punishment !== "kick" && punishment !== "ban" && punishment !== 'mute') throw new Error("[Discord Chat Filter] -> Invalid punishment (ban, kick, mute)")

    if (!options || !options.alertMessage || !options.muteMessage || !options.kickMessage || !options.banMessage || !options.kickErrorMessage || !options.banErrorMessage) {
        options = {
            alertMessage: "Hey, [member], please stop spamming.",
            muteMessage: "[member] has been muted for `spamming`",
            kickMessage: "[member] has been kicked for `spamming`",
            banMessage: "[member] has been banned for `spamming`",
            muteErrorMessage: "[member] can't be muted",
            kickErrorMessage: "[member] can't be kicked",
            banErrorMessage: "[member] can't be banned"
        }
    } else {
        options = {
            alertMessage: options.alertMessage,
            muteMessage: options.muteMessage,
            kickMessage: options.kickMessage,
            banMessage: options.banMessage,
            muteErrorMessage: options.muteErrorMessage,
            kickErrorMessage: options.kickErrorMessage,
            banErrorMessage: options.banErrorMessage
        }
    }

    let minmsg = alertMessage
    let maxmsg = punishment
    if (ignoredMembers?.includes(message.author.id)) return;
    if (map.has(message.author.id)) {
        const db = map.get(message.author.id)
        const { msg, timer } = db;
        const time = message.createdTimestamp - msg.createdTimestamp;
        let msgs = db.msgs
        if (time > maxInterval) {
            clearTimeout(timer);
            db.msgs = 1;
            db.msg = message;
            db.timer = setTimeout(() => {
                map.delete(message.author.id);
            }, 5000)
            map.set(message.author.id, db)
        } else {
            ++msgs;
            switch (msgs) {
                case minmsg:
                    message.channel.send(`${options.alertMessage.replace("[member]", `${message.member}`).replace("[memberusertag]", `${message.author.tag}`).replace("[memberuserusername]", `${message.author.username}`).replace("[memberuserid]", `${message.member.id}`)}`)
                    break;
                case maxmsg:
                    if (punishment === "mute") {
                        message.channel.send(`${options.kickMessage.replace("[member]", `${message.member}`).replace("[memberusertag]", `${message.author.tag}`).replace("[memberuserusername]", `${message.author.username}`).replace("[memberuserid]", `${message.member.id}`)}`)
                        message.member.timeout(3600000, "AntiSpam").catch(err => message.channel.send(`${options.muteErrorMessage.replace("[memberusertag]", `${message.author.tag}`).replace("[memberuserusername]", `${message.author.username}`).replace("[memberuserid]", `${message.member.id}`) + " " + err}`))
                        if (removeMessages == true) message.channel.bulkDelete(messageCount, true)
                        if (logsChannel) {
                            message.guild.channels.cache.get(logsChannel).send({
                                embeds: [
                                    new Discord.MessageEmbed()
                                        .setTiltle('Mute')
                                        .setURL('https://www.npmjs.com/package/discord-chat-filter')
                                        .setColor('RED')
                                        .addField('Member', message.author.username + '(' + message.member.id + ')')
                                        .addField('Moderator', 'Console')
                                        .addField('Reason', 'Spamming')
                                        .setThumbnail(message.author.displayAvatarURL())
                                        .setFooter('Discord Chat Filter©')
                                ]
                            })
                        }
                    }
                    if (punishment === "kick") {
                        message.channel.send(`${options.kickMessage.replace("[member]", `${message.member}`).replace("[memberusertag]", `${message.author.tag}`).replace("[memberuserusername]", `${message.author.username}`).replace("[memberuserid]", `${message.member.id}`)}`)
                        message.member.kick("AntiSpam").catch(err => message.channel.send(`${options.kickErrorMessage.replace("[memberusertag]", `${message.author.tag}`).replace("[memberuserusername]", `${message.author.username}`).replace("[memberuserid]", `${message.member.id}`) + " " + err}`))
                        if (removeMessages == true) message.channel.bulkDelete(messageCount, true)
                        if (logsChannel) {
                            message.guild.channels.cache.get(logsChannel).send({
                                embeds: [
                                    new Discord.MessageEmbed()
                                        .setTiltle('Kick')
                                        .setURL('https://www.npmjs.com/package/discord-chat-filter')
                                        .setColor('RED')
                                        .addField('Member', message.author.username + '(' + message.member.id + ')')
                                        .addField('Moderator', 'Console')
                                        .addField('Reason', 'Spamming')
                                        .setThumbnail(message.author.displayAvatarURL())
                                        .setFooter('Discord Chat Filter©')
                                ]
                            })
                        }
                    }
                    if (punishment === "ban") {
                        message.channel.send(`${options.banMessage.replace("[member]", `${message.member}`).replace("[memberusertag]", `${message.author.tag}`).replace("[memberuserusername]", `${message.author.username}`).replace("[memberuserid]", `${message.member.id}`)}`)
                        message.member.ban("AntiSpam").catch(err => message.channel.send(`${options.banErrorMessage.replace("[memberusertag]", `${message.author.tag}`).replace("[memberuserusername]", `${message.author.username}`).replace("[memberuserid]", `${message.member.id}`) + " " + err}`))
                        if (removeMessages == true) message.channel.bulkDelete(messageCount, true)
                        if (logsChannel) {
                            message.guild.channels.cache.get(logsChannel).send({
                                embeds: [
                                    new Discord.MessageEmbed()
                                        .setTiltle('Ban')
                                        .setURL('https://www.npmjs.com/package/discord-chat-filter')
                                        .setColor('RED')
                                        .addField('Member', message.author.username + '(' + message.member.id + ')')
                                        .addField('Moderator', 'Console')
                                        .addField('Reason', 'Spamming')
                                        .setThumbnail(message.author.displayAvatarURL())
                                        .setFooter('Discord Chat Filter©')
                                ]
                            })
                        }
                    }
                    break;
            }
            db.msgs = msgs;
            map.set(message.author.id, db)
        }
    } else {
        let timerr = setTimeout(() => {
            map.delete(message.author.id);
        }, 5000)
        map.set(message.author.id, {
            msgs: 1,
            msg: message,
            timer: timerr
        })
    }


}


module.exports.spamfilter = spamfilter;